from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from database.database import Database
from keyboards.keyboards import get_main_keyboard
from config.messages import (
    START_MESSAGE,
    ABOUT_BOT_MESSAGE,
    COLLABORATION_MESSAGE,
    PAID_CONTENT_MESSAGE
)
from .states import ContentStates
from aiogram.fsm.state import State, StatesGroup
from .paid_content_handlers import show_paid_content_menu, back_to_start_callback
import re
from database.database import DatabaseError
import logging

logger = logging.getLogger(__name__)

# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤–∏–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
LINK_ERROR_MESSAGES = {
    "youtube": (
        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏\n\n"
        "üìå –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫:\n"
        "‚Ä¢ youtube.com/@–≤–∞—à_–∫–∞–Ω–∞–ª\n"
        "‚Ä¢ youtube.com/channel/ID\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É:"
    ),
    "shorts": (
        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏\n\n"
        "üìå –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫:\n"
        "‚Ä¢ youtube.com/@–≤–∞—à_–∫–∞–Ω–∞–ª\n"
        "‚Ä¢ youtube.com/channel/ID\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É:"
    ),
    "tiktok": (
        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏\n\n"
        "üìå –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:\n"
        "‚Ä¢ tiktok.com/@–≤–∞—à_–∞–∫–∫–∞—É–Ω—Ç\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É:"
    ),
    "twitch": (
        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏\n\n"
        "üìå –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:\n"
        "‚Ä¢ twitch.tv/–≤–∞—à_–∫–∞–Ω–∞–ª\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É:"
    ),
    "other": (
        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏\n\n"
        "üìå –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞:\n"
        "‚Ä¢ https://–≤–∞—à_—Å–∞–π—Ç.com/–≤–∞—à_–∫–∞–Ω–∞–ª\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É:"
    )
}

class CollaborationStates(StatesGroup):
    waiting_for_platform = State()
    waiting_for_link = State()
    waiting_for_views = State()
    waiting_for_experience = State()
    waiting_for_frequency = State()
    waiting_for_promo = State()
    waiting_for_more = State()
    waiting_for_viewers = State()

router = Router()
router.database = None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ main.py

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º –±–ª–æ–≥–µ—Ä–æ–º
    user_id = message.from_user.id
    username = message.from_user.username or str(user_id)
    is_approved = await router.database.is_approved_blogger(username)
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard_buttons = [
        [KeyboardButton(text="–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ")],
        [KeyboardButton(text="–û –±–æ—Ç–µ")]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É" —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –±–ª–æ–≥–µ—Ä–æ–≤
    if is_approved:
        keyboard_buttons.insert(1, [KeyboardButton(text="–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É")])
    
    keyboard_regular = ReplyKeyboardMarkup(
        keyboard=keyboard_buttons,
        resize_keyboard=True,
        persistent=True
    )
    
    # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–º–∏ –∂–µ –æ–ø—Ü–∏—è–º–∏
    inline_buttons = [
        [InlineKeyboardButton(text="ü§ù –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ", callback_data="collaboration")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º inline-–∫–Ω–æ–ø–∫—É "–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É" —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –±–ª–æ–≥–µ—Ä–æ–≤
    if is_approved:
        inline_buttons.insert(1, [InlineKeyboardButton(text="üí∞ –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É", callback_data="paid_content")])
    
    keyboard_inline = InlineKeyboardMarkup(inline_keyboard=inline_buttons)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–µ–∏–º–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏
    await message.answer(
        START_MESSAGE,
        reply_markup=keyboard_regular,
        disable_web_page_preview=True
    )
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard_inline,
        parse_mode="HTML",
        disable_web_page_preview=True
    )

@router.message(F.text == "–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ")
async def collaboration(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="apply_collab"),
            InlineKeyboardButton(text="üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è", callback_data="collab_requirements")
        ],
        [
            InlineKeyboardButton(text="‚ùì FAQ", callback_data="collab_faq"),
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")
        ]
    ])
    
    await message.answer(
        "üíé –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ:\n\n"
        "- –£—Å–ª–æ–≤–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞\n"
        "- –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É\n"
        "- –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞,\n"
        "—Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.message(F.text == "–û –±–æ—Ç–µ")
async def about_bot(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="ü§ù –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ", callback_data="collaboration")]
    ])
    
    await message.answer(
        ABOUT_BOT_MESSAGE,
        reply_markup=keyboard,
        parse_mode="HTML",
        disable_web_page_preview=True
    )

@router.message(Command("test_emoji"))
async def test_emoji(message: types.Message):
    await message.answer(
        text="<tg-emoji emoji-id='5201987788173500097'>‚öîÔ∏è</tg-emoji> –¢–µ—Å—Ç —ç–º–æ–¥–∑–∏ –∏–∑ RaidTool –ø–∞–∫–∞",
        parse_mode="HTML",
        disable_web_page_preview=True
    )

@router.message(F.custom_emoji)
async def get_emoji_info(message: types.Message):
    if message.entities:
        for entity in message.entities:
            if hasattr(entity, 'custom_emoji_id'):
                await message.reply(
                    f"Emoji ID: {entity.custom_emoji_id}\n"
                    f"Tag format: <tg-emoji emoji-id='{entity.custom_emoji_id}'>‚öîÔ∏è</tg-emoji>",
                    disable_web_page_preview=True
                )

@router.message(Command("test_all_emoji"))
async def test_all_emoji(message: types.Message):
    await message.answer(
        text=(
            "–¢–µ—Å—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏:\n"
            "<tg-emoji emoji-id='5201987788173500097'>üåç</tg-emoji> - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π —ç–º–æ–¥–∑–∏\n"
        ),
        parse_mode="HTML",
        disable_web_page_preview=True
    )

@router.message(F.text == "–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É")
async def paid_content_text(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º ID –∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    username = message.from_user.username or str(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º –±–ª–æ–≥–µ—Ä–æ–º
    is_approved = await router.database.is_approved_blogger(username)
    
    if not is_approved:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–¥–æ–±—Ä–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="apply_collab")],
            [InlineKeyboardButton(text="‚ùì FAQ", callback_data="collab_faq")]
        ])
        
        await message.answer(
            "‚ùóÔ∏è –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞–∑–¥–µ–ª—É '–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É' –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n\n"
            "1Ô∏è‚É£ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ\n"
            "2Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
            "3Ô∏è‚É£ –í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è\n\n"
            "–ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ!",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É
    stats = await router.database.get_user_applications_stats(user_id)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì§ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="submit_paid_content")],
        [InlineKeyboardButton(
            text=f"üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏ (üí∞ {stats['paid']} | ‚è≥ {stats['unpaid']})", 
            callback_data="my_paid_content"
        )],
        [
            InlineKeyboardButton(text="‚ÑπÔ∏è –î–ª—è –Ω–∞—Ä–µ–∑—á–∏–∫–æ–≤", callback_data="info_for_cutters"),
            InlineKeyboardButton(text="üìå –û —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ", callback_data="info_functionality")
        ],
        [
            InlineKeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–Ω–Ω–µ—Ä", callback_data="check_banner"),
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")
        ]
    ])
    
    text = (
        "üí∞ <b>–†–∞–∑–¥–µ–ª –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–Ω–Ω–µ—Ä –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º\n"
        "‚Ä¢ –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏ —É—Å–ª–æ–≤–∏—è–º–∏"
    )
    
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML", disable_web_page_preview=True)

def is_valid_platform_link(platform: str, link: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã."""
    patterns = {
        "youtube": (
            # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—ã:
            # https://youtube.com/@username
            # https://youtube.com/channel/ID
            # –° www. –∏–ª–∏ –±–µ–∑, —Å http:// –∏–ª–∏ https://
            r'https?://(?:www\.)?youtube\.com/'
            r'(?:'
            r'@[\w-]{3,}/?$|'  # username —Ñ–æ—Ä–º–∞—Ç (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)
            r'channel/[\w-]{24}/?$'  # channel ID —Ñ–æ—Ä–º–∞—Ç (24 —Å–∏–º–≤–æ–ª–∞)
            r')'
        ),
        "shorts": (
            # –¢–∞–∫–æ–π –∂–µ –ø–∞—Ç—Ç–µ—Ä–Ω –∫–∞–∫ –¥–ª—è YouTube
            r'https?://(?:www\.)?youtube\.com/'
            r'(?:'
            r'@[\w-]{3,}/?$|'
            r'channel/[\w-]{24}/?$'
            r')'
        ),
        "tiktok": (
            # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç:
            # https://tiktok.com/@username
            # –° www. –∏–ª–∏ –±–µ–∑, —Å http:// –∏–ª–∏ https://
            r'https?://(?:www\.)?tiktok\.com/@[\w.]{2,}/?$'
        ),
        "twitch": (
            # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç:
            # https://twitch.tv/username
            # –° www. –∏–ª–∏ –±–µ–∑, —Å http:// –∏–ª–∏ https://
            r'https?://(?:www\.)?twitch\.tv/[\w-]{4,}/?$'
        ),
        "other": (
            # –õ—é–±–æ–π –≤–∞–ª–∏–¥–Ω—ã–π URL
            r'https?://\S+'
        )
    }
    
    pattern = patterns.get(platform.lower(), patterns["other"])
    return bool(re.match(pattern, link))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
@router.callback_query(F.data == "apply_collab")
async def start_collaboration(callback: types.CallbackQuery, state: FSMContext):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_text –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.set_state(CollaborationStates.waiting_for_platform)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="YouTube", callback_data="platform_youtube")],
        [InlineKeyboardButton(text="Shorts", callback_data="platform_shorts")],
        [InlineKeyboardButton(text="TikTok", callback_data="platform_tiktok")],
        [InlineKeyboardButton(text="Twitch", callback_data="platform_twitch")],
        [InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data="platform_other")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
    ])
    
    await callback.message.edit_text(
        "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞:",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("platform_"))
async def process_platform(callback: types.CallbackQuery, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    await callback.message.delete()
    
    platform = callback.data.split("_")[1]
    await state.update_data(platform=platform)
    await state.set_state(CollaborationStates.waiting_for_link)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
    ])
    
    # –†–∞–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
    if platform == "youtube":
        message_text = (
            "üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à YouTube –∫–∞–Ω–∞–ª:\n\n"
            "üìå –ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
            "‚Ä¢ youtube.com/@–≤–∞—à_–∫–∞–Ω–∞–ª\n"
            "‚Ä¢ youtube.com/channel/ID"
        )
    elif platform == "shorts":
        message_text = (
            "üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à YouTube –∫–∞–Ω–∞–ª:\n\n"
            "üìå –ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
            "‚Ä¢ youtube.com/@–≤–∞—à_–∫–∞–Ω–∞–ª\n"
            "‚Ä¢ youtube.com/channel/ID"
        )
    elif platform == "tiktok":
        message_text = (
            "üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à TikTok:\n\n"
            "üìå –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞:\n"
            "‚Ä¢ tiktok.com/@–≤–∞—à_–∞–∫–∫–∞—É–Ω—Ç"
        )
    elif platform == "twitch":
        message_text = (
            "üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à Twitch –∫–∞–Ω–∞–ª:\n\n"
            "üìå –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞:\n"
            "‚Ä¢ twitch.tv/–≤–∞—à_–∫–∞–Ω–∞–ª"
        )
    else:
        message_text = "üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª"
    
    await callback.message.answer(
        message_text,
        reply_markup=keyboard,
        disable_web_page_preview=True
    )

@router.message(CollaborationStates.waiting_for_link)
async def process_link(message: types.Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.delete()
    
    data = await state.get_data()
    platform = data.get('platform')
    
    # –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
    async def send_error_message():
        error_message = LINK_ERROR_MESSAGES.get(platform, LINK_ERROR_MESSAGES["other"])
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
        ])
        await message.answer(
            error_message,
            reply_markup=keyboard,
            disable_web_page_preview=True
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–º
    if not message.text:
        await send_error_message()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏
    if not is_valid_platform_link(platform, message.text):
        await send_error_message()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
    try:
        channel_info = await router.database.check_channel_exists(
            channel_link=message.text,
            platform=platform,
            telegram_id=message.from_user.id
        )
        
        if channel_info:
            if channel_info['own_channel']:
                await message.answer(
                    f"‚ùå –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —É –≤–∞—Å –∫–∞–∫ {channel_info['platform']}!\n\n"
                    "–ù–µ–ª—å–∑—è —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω –∫–∞–Ω–∞–ª –¥–≤–∞–∂–¥—ã –Ω–∞ –æ–¥–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
                    ]),
                    disable_web_page_preview=True
                )
            else:
                await message.answer(
                    "‚ùå –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!\n\n"
                    "–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞,\n"
                    "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
                    ]),
                    disable_web_page_preview=True
                )
            return
            
        # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await state.update_data(current_link=message.text)
        await state.set_state(CollaborationStates.waiting_for_views)
        
        data = await state.get_data()
        platform = data.get("platform")
        
        if platform == "Twitch":
            await message.answer(
                "3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑—Ä–∏—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∏–º–µ:",
                disable_web_page_preview=True
            )
        else:
            await message.answer(
                "3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ —Å—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:",
                disable_web_page_preview=True
            )

    except DatabaseError as e:
        logger.error(f"Error checking channel: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞–Ω–∞–ª–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
            ])
        )

@router.message(CollaborationStates.waiting_for_views)
async def process_views(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–º
    if not message.text:
        data = await state.get_data()
        platform = data.get("platform")
        
        if platform == "Twitch":
            error_text = (
                "‚ùå –û—à–∏–±–∫–∞: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑—Ä–∏—Ç–µ–ª–µ–π —Ç–µ–∫—Å—Ç–æ–º, –∞ –Ω–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/—Ñ–∞–π–ª–æ–º\n\n"
                "‚úÖ –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\n"
                "‚Ä¢ 20\n"
                "‚Ä¢ 50\n"
                "‚Ä¢ 100"
            )
        else:
            error_text = (
                "‚ùå –û—à–∏–±–∫–∞: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Ç–µ–∫—Å—Ç–æ–º, –∞ –Ω–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/—Ñ–∞–π–ª–æ–º\n\n"
                "‚úÖ –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\n"
                "‚Ä¢ 1000\n"
                "‚Ä¢ 5000\n"
                "‚Ä¢ 10000"
            )
        
        await message.answer(
            error_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
            ]),
            disable_web_page_preview=True
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    views_text = message.text.strip()
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –∑–∞–ø—è—Ç—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    clean_views = views_text.replace(" ", "").replace(",", "")
    
    if not clean_views.isdigit():
        data = await state.get_data()
        platform = data.get("platform")
        
        if platform == "Twitch":
            error_text = (
                "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞ –∑—Ä–∏—Ç–µ–ª–µ–π\n\n"
                "‚úÖ –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\n"
                "‚Ä¢ 20\n"
                "‚Ä¢ 50\n"
                "‚Ä¢ 100\n\n"
                "‚ùå –ü—Ä–∏–º–µ—Ä—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\n"
                "‚Ä¢ 20–∫\n"
                "‚Ä¢ –º–Ω–æ–≥–æ\n"
                "‚Ä¢ ~20\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ (—Ü–∏—Ñ—Ä—ã):"
            )
        else:
            error_text = (
                "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n\n"
                "‚úÖ –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\n"
                "‚Ä¢ 1000\n"
                "‚Ä¢ 5000\n"
                "‚Ä¢ 10000\n\n"
                "‚ùå –ü—Ä–∏–º–µ—Ä—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\n"
                "‚Ä¢ 1–∫\n"
                "‚Ä¢ –º–Ω–æ–≥–æ\n"
                "‚Ä¢ ~1000\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ (—Ü–∏—Ñ—Ä—ã):"
            )
        
        await message.answer(
            error_text,
            disable_web_page_preview=True
        )
        return
    
    await state.update_data(current_views=clean_views)
    await state.set_state(CollaborationStates.waiting_for_experience)
    
    await message.answer(
        "4Ô∏è‚É£ –û–ø–∏—à–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å Rust:",
        disable_web_page_preview=True
    )

@router.message(CollaborationStates.waiting_for_experience)
async def process_experience(message: types.Message, state: FSMContext):
    if not message.text:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –æ–ø—ã—Ç–∞",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
            ])
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã
    await state.update_data(current_experience=message.text)
    await state.set_state(CollaborationStates.waiting_for_frequency)
    
    await message.answer(
        "5Ô∏è‚É£ –ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –≤—ã–ø—É—Å–∫–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
        ])
    )

@router.message(CollaborationStates.waiting_for_frequency)
async def process_frequency(message: types.Message, state: FSMContext):
    if not message.text:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –≤—ã–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
            ])
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å—Ç–æ—Ç—É –≤—ã–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    await state.update_data(current_frequency=message.text)
    await state.set_state(CollaborationStates.waiting_for_promo)
    
    await message.answer(
        "6Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –≤–∞—à–µ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏:\n\n"
        "‚ùóÔ∏è –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–æ–º–æ–∫–æ–¥—É:\n"
        "‚Ä¢ –û—Ç 2 –¥–æ 10 —Å–∏–º–≤–æ–ª–æ–≤\n"
        "‚Ä¢ –¢–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã\n"
        "‚Ä¢ –¢–æ–ª—å–∫–æ –í–ï–†–•–ù–ò–ô —Ä–µ–≥–∏—Å—Ç—Ä",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
        ])
    )

@router.message(CollaborationStates.waiting_for_promo)
async def process_promo(message: types.Message, state: FSMContext):
    if not message.text:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ —Ç–µ–∫—Å—Ç–æ–º",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
            ])
        )
        return

    promo = message.text.strip().upper()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞
    if not re.match(r'^[A-Z0-9]{2,10}$', promo):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞\n\n"
            "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
            "‚Ä¢ –û—Ç 2 –¥–æ 10 —Å–∏–º–≤–æ–ª–æ–≤\n"
            "‚Ä¢ –¢–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã\n"
            "‚Ä¢ –¢–æ–ª—å–∫–æ –í–ï–†–•–ù–ò–ô —Ä–µ–≥–∏—Å—Ç—Ä\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
            ])
        )
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥–∞ —Å —É—á–µ—Ç–æ–º telegram_id
        if await router.database.check_promo_exists(promo, message.from_user.id):
            await message.answer(
                "‚ùå –≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–æ–∫–æ–¥:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
                ])
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        await state.update_data(promo_code=promo)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        data = await state.get_data()
        
        # –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        preview_text = (
            "üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n\n"
            f"üéÆ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {data['platform']}\n"
            f"üîó –°—Å—ã–ª–∫–∞: {data['current_link']}\n"
            f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {data['current_views']}\n"
            f"‚≠êÔ∏è –û–ø—ã—Ç: {data['current_experience']}\n"
            f"üìÖ –ß–∞—Å—Ç–æ—Ç–∞: {data['current_frequency']}\n"
            f"üéü –ü—Ä–æ–º–æ–∫–æ–¥: {data['promo_code']}\n\n"
            "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω—ã –≤–µ—Ä–Ω–æ?"
        )
        
        await state.set_state(CollaborationStates.waiting_for_more)
        await message.answer(
            preview_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="finish_application"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")
                ]
            ])
        )

    except DatabaseError as e:
        logger.error(f"Error checking promo code: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
            ])
        )

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
@router.callback_query(lambda c: c.data == "about")
async def about_bot_callback(callback: types.CallbackQuery):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º –±–ª–æ–≥–µ—Ä–æ–º
    user_id = callback.from_user.id
    username = callback.from_user.username or str(user_id)
    is_approved = await router.database.is_approved_blogger(username)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    buttons = [[InlineKeyboardButton(text="ü§ù –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ", callback_data="collaboration")]]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text(
        ABOUT_BOT_MESSAGE,
        reply_markup=keyboard,
        parse_mode="HTML",
        disable_web_page_preview=True
    )

@router.callback_query(lambda c: c.data == "collaboration")
async def collaboration_callback(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="apply_collab"),
            InlineKeyboardButton(text="üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è", callback_data="collab_requirements")
        ],
        [
            InlineKeyboardButton(text="‚ùì FAQ", callback_data="collab_faq"),
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")
        ]
    ])
    
    await callback.message.edit_text(
        "üíé –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ:\n\n"
        "- –£—Å–ª–æ–≤–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞\n"
        "- –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É\n"
        "- –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞,\n"
        "—Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.callback_query(lambda c: c.data == "collab_requirements")
async def show_requirements(callback: types.CallbackQuery):
    requirements_text = (
        "üìã <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞:</b>\n\n"
        "üé• <b>YouTube:</b>\n"
        "‚Ä¢ –û—Ç 1000 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –≤ —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ Rust-–∫–æ–Ω—Ç–µ–Ω—Ç–µ\n"
        "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã–ø—É—Å–∫–∏ –≤–∏–¥–µ–æ\n"
        "‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –º–æ–Ω—Ç–∞–∂ –∏ –∑–≤—É–∫\n\n"
        "üì± <b>Shorts/TikTok:</b>\n"
        "‚Ä¢ –û—Ç 3000 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ –≤–∏–¥–µ–æ –ø–æ Rust\n"
        "‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n"
        "‚Ä¢ –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Å—ä–µ–º–∫–µ\n\n"
        "üéÆ <b>Twitch:</b>\n"
        "‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–æ 20+ –∑—Ä–∏—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∏–º–µ\n"
        "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ —Å—Ç—Ä–∏–º—ã –ø–æ Rust\n"
        "‚Ä¢ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π\n\n"
        "üåê <b>–î—Ä—É–≥–∏–µ –ø–ª–æ—â–∞–¥–∫–∏:</b>\n"
        "‚Ä¢ –û–±—Å—É–∂–¥–∞—é—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ\n"
        "‚Ä¢ –í–∞–∂–µ–Ω –æ—Ö–≤–∞—Ç –∏ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏–∏"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="apply_collab")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="collaboration")]
    ])
    
    await callback.message.edit_text(
        requirements_text,
        reply_markup=keyboard,
        parse_mode="HTML",
        disable_web_page_preview=True
    )

@router.callback_query(lambda c: c.data == "collab_faq")
async def show_faq(callback: types.CallbackQuery):
    faq_text = (
        "‚ùì <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>\n\n"
        "1Ô∏è‚É£ <b>–ö–∞–∫ —á–∞—Å—Ç–æ –Ω—É–∂–Ω–æ –≤—ã–ø—É—Å–∫–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç?</b>\n"
        "‚Ä¢ –ú–∏–Ω–∏–º—É–º 2-3 –≤–∏–¥–µ–æ/—Å—Ç—Ä–∏–º–∞ –≤ –º–µ—Å—è—Ü\n"
        "‚Ä¢ –î–ª—è Shorts/TikTok –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ 2-3 –≤–∏–¥–µ–æ –≤ –Ω–µ–¥–µ–ª—é\n\n"
        "2Ô∏è‚É£ <b>–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –±–∞–Ω–Ω–µ—Ä—É/–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏?</b>\n"
        "‚Ä¢ –ë–∞–Ω–Ω–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ä–æ—à–æ –≤–∏–¥–µ–Ω\n"
        "‚Ä¢ –ù–µ –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—Ç—å—Å—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º\n"
        "‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–∫–∞–∑–∞ - 8 —Å–µ–∫—É–Ω–¥\n\n"
        "3Ô∏è‚É£ <b>–ö–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–ø–ª–∞—Ç–∞?</b>\n"
        "‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è\n"
        "‚Ä¢ –ó–∞–≤–∏—Å–∏—Ç –æ—Ç –æ—Ö–≤–∞—Ç–∞ –∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n"
        "‚Ä¢ –û–±—Å—É–∂–¥–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏\n\n"
        "4Ô∏è‚É£ <b>–ú–æ–∂–Ω–æ –ª–∏ —Å–æ–≤–º–µ—â–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏?</b>\n"
        "‚Ä¢ –î–∞, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–Ω–∫—É—Ä–∏—Ä—É—é—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã\n"
        "‚Ä¢ –û–±—Å—É–∂–¥–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ"
    )
    
    keyboard = InlineKeyboardButton(text="üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="apply_collab")
    inline_buttons = [
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="collaboration")],
        [keyboard]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=inline_buttons)
    
    await callback.message.edit_text(
        faq_text,
        reply_markup=keyboard,
        parse_mode="HTML",
        disable_web_page_preview=True
    )

@router.callback_query(F.data == "cancel_application")
async def cancel_application(callback: types.CallbackQuery, state: FSMContext):
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.clear()
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    inline_buttons = [
        [InlineKeyboardButton(text="ü§ù –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ", callback_data="collaboration")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")]
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=inline_buttons)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ
    await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer(
        START_MESSAGE,
        reply_markup=keyboard,
        parse_mode="HTML",
        disable_web_page_preview=True
    )

@router.callback_query(F.data == "platform_twitch")
async def process_twitch_platform(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(platform="twitch")
    await state.set_state(CollaborationStates.waiting_for_link)
    
    await callback.message.edit_text(
        "2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à Twitch-–∫–∞–Ω–∞–ª:\n\n"
        "–ü—Ä–∏–º–µ—Ä: https://twitch.tv/your_channel",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
        ])
    )

@router.message(CollaborationStates.waiting_for_link, lambda m: m.text and "twitch.tv" in m.text.lower())
async def process_twitch_link(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏
    if not is_valid_platform_link("twitch", message.text):
        await message.answer(
            LINK_ERROR_MESSAGES["twitch"],
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
            ])
        )
        return

    await state.update_data(current_link=message.text)
    await state.set_state(CollaborationStates.waiting_for_viewers)  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è Twitch
    
    await message.answer(
        "3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑—Ä–∏—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∏–º–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
        ])
    )

@router.message(CollaborationStates.waiting_for_viewers)
async def process_twitch_viewers(message: types.Message, state: FSMContext):
    try:
        viewers = int(message.text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
        if viewers < 0:
            raise ValueError("Negative number")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (20+ –∑—Ä–∏—Ç–µ–ª–µ–π)
        if viewers < 20:
            await message.answer(
                "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∫–∞–Ω–∞–ª –ø–æ–∫–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.\n\n"
                "–î–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 20 –∑—Ä–∏—Ç–µ–ª–µ–π –≤ —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ —Å—Ç—Ä–∏–º–µ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ –≤–∞—à–∞ –∞—É–¥–∏—Ç–æ—Ä–∏—è –≤—ã—Ä–∞—Å—Ç–µ—Ç!",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
                ])
            )
            return
            
        await state.update_data(current_viewers=viewers)
        await state.set_state(CollaborationStates.waiting_for_views)
        
        await message.answer(
            "4Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ VOD (–≤–∏–¥–µ–æ) –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
            ])
        )
        
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∑—Ä–∏—Ç–µ–ª–µ–π\n\n"
            "‚úÖ –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\n"
            "‚Ä¢ 20\n"
            "‚Ä¢ 50\n"
            "‚Ä¢ 100\n\n"
            "‚ùå –ü—Ä–∏–º–µ—Ä—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\n"
            "‚Ä¢ 20–∫\n"
            "‚Ä¢ –º–Ω–æ–≥–æ\n"
            "‚Ä¢ ~20",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
            ])
        )

@router.callback_query(F.data == "finish_application")
async def finish_application(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏"""
    data = await state.get_data()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = callback.from_user.id
        username = callback.from_user.username or str(user_id)
        telegram_user_id = await router.database.get_or_create_user(user_id, username)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        channel_id = await router.database.add_channel(
            telegram_id=user_id,
            platform=data['platform'],
            channel_link=data['current_link'],
            channel_name=data['current_link'],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Å—ã–ª–∫—É –∫–∞–∫ –∏–º—è –∫–∞–Ω–∞–ª–∞
            views_count=int(data['current_views']),
            experience=data['current_experience'],
            frequency=data['current_frequency'],
            promo_code=data['promo_code']
        )
        
        # –ï—Å–ª–∏ —ç—Ç–æ Twitch, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–∫–∂–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑—Ä–∏—Ç–µ–ª–µ–π
        if data['platform'].lower() == 'twitch' and 'current_viewers' in data:
            await router.database.update_channel_viewers(
                channel_id=channel_id,
                viewers_count=int(data['current_viewers'])
            )
        
        if not channel_id:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏", show_alert=True)
            return
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        await callback.message.edit_text(
            "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n"
            "–ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ—ë –≤ —Ç–µ—á–µ–Ω–∏–µ 48 —á–∞—Å–æ–≤ –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É —Å HARDWAY!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üìù –ü–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É", callback_data="apply_collab"),
                    InlineKeyboardButton(text="‚óÄÔ∏è –í –º–µ–Ω—é", callback_data="back_to_start")
                ]
            ])
        )
        
    except Exception as e:
        logger.error(f"Error saving application: {e}")
        await callback.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            show_alert=True
        )

def register_media_handlers(dp, db: Database):
    router.database = db  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–æ—É—Ç–µ—Ä–∞
    dp.include_router(router) 