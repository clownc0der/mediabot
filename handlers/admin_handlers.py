from aiogram import Router, F, types
from aiogram.filters import Command, BaseFilter
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.database import Database, DatabaseError
from utils.message_utils import safe_send_message, safe_edit_message
from .states import AdminStates  # –£–±–∏—Ä–∞–µ–º PaymentStates, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–∞–º –Ω–µ –Ω—É–∂–µ–Ω –∑–¥–µ—Å—å
import logging
import re
import aiosqlite
from datetime import datetime

logger = logging.getLogger('bot_logger')

router = Router()
router.database = None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ main.py
ADMIN_IDS = []  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

APPS_PER_PAGE = 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

class ApprovalStates(StatesGroup):
    waiting_for_username = State()
    waiting_for_promo = State()
    waiting_for_confirmation = State()
    waiting_for_comment = State()

class PaymentStates(StatesGroup):
    waiting_for_views = State()
    waiting_for_amount = State()
    waiting_for_confirmation = State()

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–∏
class ConnectionStates(StatesGroup):
    waiting_for_channel_link = State()  # –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è

# –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
class NoActiveState(BaseFilter):
    async def __call__(self, message: Message, state: FSMContext) -> bool:
        current_state = await state.get_state()
        if current_state is not None:
            await message.answer(
                "‚ùå –ö–æ–º–∞–Ω–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤–æ –≤—Ä–µ–º—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã.\n"
                "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /cancel",
                disable_web_page_preview=True
            )
            return False
        return True

# –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞
class IsAdmin(BaseFilter):
    async def __call__(self, message: Message) -> bool:
        return message.from_user.id in ADMIN_IDS

def register_admin_handlers(dp, db: Database, admin_ids: list[int]):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥"""
    global ADMIN_IDS
    ADMIN_IDS = admin_ids
    router.database = db
    dp.include_router(router)

async def safe_send_message(bot, user_id: int, text: str, **kwargs):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –æ—à–∏–±–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    try:
        await bot.send_message(user_id, text, **kwargs)
    except Exception as e:
        logging.error(f"Error sending message to user {user_id}: {e}")

async def format_application_text(app: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    content_type = app.get('content_type', 'unknown')
    status = app.get('status', 'unknown')
    username = app.get('username', '–ù–µ—Ç username')
    link = app.get('link', '–°—Å—ã–ª–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
    views_count = app.get('views_count', 0)
    publish_date = app.get('publish_date', '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    content_type_display = {
        'video': 'üé• –í–∏–¥–µ–æ',
        'shorts': 'üì± Shorts/TikTok',
        'stream': 'üéÆ –°—Ç—Ä–∏–º',
        'unknown': '‚ùì –¢–∏–ø –Ω–µ —É–∫–∞–∑–∞–Ω'
    }
    
    # –ë–∞–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∑–∞—è–≤–æ–∫
    text = (
        f"üìä –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content_type_display.get(content_type, '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø')}\n"
        f"üîó –°—Å—ã–ª–∫–∞: {link}\n"
        f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {views_count:,}\n"
        f"üìÖ –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {publish_date}\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å—Ç—Ä–∏–º–æ–≤
    if content_type == 'stream' and 'screenshot' in app:
        text += f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {app['screenshot']}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if 'current_views' in app and app['current_views'] is not None:
        text += f"üìä –¢–µ–∫—É—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: {app['current_views']:,}\n"
        
    if 'payment_amount' in app and app['payment_amount'] is not None:
        text += f"üí∞ –°—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã: {app['payment_amount']} —Ä—É–±.\n"
        
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
    if 'notes' in app and app['notes']:
        text += f"\nüìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {app['notes']}\n"
    elif 'note' in app and app['note']:  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±–æ–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–ª—è
        text += f"\nüìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {app['note']}\n"
    
    return text

# –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞
def is_admin(admin_ids: list[int]):
    async def check(message: Message):
        return message.from_user.id in admin_ids
    return check

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ
@router.message(Command("apps"), IsAdmin(), NoActiveState())
async def show_applications_menu(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞—è–≤–∫–∞–º –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ
    stats = await router.database.get_collaboration_stats()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞—è–≤–∫–∞–º –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ</b>\n\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {stats['total_applications']}\n"
        f"‚Ä¢ –û–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {stats['pending_applications']}\n"
        f"‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–æ: {stats['approved_applications']}\n"
        f"‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats['rejected_applications']}\n"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"‚è≥ –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ ({stats['pending_applications']})", 
            callback_data="show_pending_apps"
        )],
        [InlineKeyboardButton(
            text=f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ ({stats['approved_applications']})", 
            callback_data="show_approved_apps"
        )],
        [InlineKeyboardButton(
            text=f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ ({stats['rejected_applications']})", 
            callback_data="show_rejected_apps"
        )]
    ])
    
    await message.answer(stats_text, reply_markup=keyboard, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
@router.callback_query(F.data.startswith("show_"))
async def show_requests_by_status(callback: CallbackQuery):
    status = callback.data.split("_")[1]  # pending, approved, rejected
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Å—Ç–∞—Ç—É—Å–æ–º
    requests = await router.database.get_requests_by_status(status)
    
    if not requests:
        status_text = {
            "pending": "–æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏",
            "approved": "–æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö",
            "rejected": "–æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö"
        }.get(status, "")
        
        await callback.message.edit_text(
            f"üìù –ù–µ—Ç {status_text} –∑–∞—è–≤–æ–∫",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_menu")]
            ])
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É
    await show_request(callback.message, requests[0], len(requests), 0, status)

async def show_request(message: Message, request: dict, total: int, current_index: int, status: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–¥–Ω—É –∑–∞—è–≤–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏
    text = (
        f"üìù <b>–ó–∞—è–≤–∫–∞ #{request['id']}</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{request['username']}\n"
        f"üéÆ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {request['platform']}\n"
        f"üîó –°—Å—ã–ª–∫–∞: {request['link']}\n"
        f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {request['views_count']:,}\n"
        f"‚≠êÔ∏è –û–ø—ã—Ç: {request['experience']}\n"
        f"üìÖ –ß–∞—Å—Ç–æ—Ç–∞: {request['frequency']}\n"
        f"üéü –ü—Ä–æ–º–æ–∫–æ–¥: {request['promo_code']}\n"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ —Å—Ç–∞—Ç—É—Å –Ω–µ pending
    if status != 'pending' and request.get('admin_comment'):
        text += f"\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {request['admin_comment']}\n"
    
    text += f"\n–ó–∞—è–≤–∫–∞ {current_index + 1} –∏–∑ {total}"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if current_index > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"nav_request_{status}_{current_index-1}"))
    if current_index < total - 1:
        nav_buttons.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"nav_request_{status}_{current_index+1}"))
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫)
    if status == "pending":
        keyboard.extend([
            [
                InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_request_{request['id']}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_request_{request['id']}")
            ]
        ])
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="back_to_admin_menu")])
    
    await message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="HTML",
        disable_web_page_preview=True
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∑–∞—è–≤–∫–∞–º
@router.callback_query(F.data.startswith("nav_request_"))
async def navigate_requests(callback: CallbackQuery):
    # –§–æ—Ä–º–∞—Ç callback_data: "nav_request_status_index"
    parts = callback.data.split("_")
    if len(parts) < 4:
        logger.error(f"Invalid callback data format: {callback.data}")
        return

    status = parts[2]
    index = int(parts[3])
    
    requests = await router.database.get_requests_by_status(status)
    if 0 <= index < len(requests):
        await show_request(callback.message, requests[index], len(requests), index, status)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
@router.callback_query(F.data.startswith("approve_request_"))
async def approve_request(callback: CallbackQuery, state: FSMContext):
    request_id = int(callback.data.split("_")[2])
    await state.update_data(request_id=request_id, action_type='approve')
    await state.set_state(AdminStates.waiting_for_comment)
    
    await callback.message.edit_text(
        "‚úçÔ∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ–¥–æ–±—Ä–µ–Ω–∏—é –∑–∞—è–≤–∫–∏:\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: —É—Å–ª–æ–≤–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞, —Å—Ç–∞–≤–∫–∞ –∏ —Ç.–¥.)",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_admin_action")]
        ])
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –æ–¥–æ–±—Ä–µ–Ω–∏—é/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—é
@router.message(AdminStates.waiting_for_comment)
async def process_admin_comment(message: Message, state: FSMContext):
    data = await state.get_data()
    request_id = data.get('request_id')
    action_type = data.get('action_type')
    
    if not request_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.clear()
        return

    success = False

    if action_type == 'approve':
        success = await router.database.approve_request(request_id, message.text)
        success_message = "‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞"
    else:
        success = await router.database.reject_request(request_id, message.text)
        success_message = "‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"

    if success:
        await message.answer(success_message)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏")
    
    await state.clear()
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫
    await show_applications_menu(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
@router.callback_query(F.data.startswith("reject_request_"))
async def start_reject_request(callback: CallbackQuery, state: FSMContext):
    request_id = int(callback.data.split("_")[2])
    await state.update_data(request_id=request_id, action_type='reject')
    await state.set_state(AdminStates.waiting_for_comment)
    
    await callback.message.edit_text(
        "‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_admin_action")]
        ])
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∞
@router.callback_query(F.data == "cancel_admin_action")
async def cancel_admin_action(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await show_applications_menu(callback.message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
@router.callback_query(F.data == "back_to_admin_menu")
async def back_to_admin_menu(callback: CallbackQuery):
    await show_applications_menu(callback.message)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–∂–∏–¥–∞—é—â–∏–º–∏ –∑–∞—è–≤–∫–∞–º–∏
@router.message(Command("pay"), IsAdmin())
async def show_users_with_pending_apps(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞—è–≤–∫–∞–º–∏ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã"""
    logger.info("Processing /pay command")
    
    users = await router.database.get_users_with_pending_applications()
    logger.info(f"Found {len(users)} users with pending applications")
    
    if not users:
        logger.warning("No users with pending applications found")
        await message.answer("üìù –ù–µ—Ç –∑–∞—è–≤–æ–∫, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–ª–∞—Ç—ã")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_pending = sum(user['pending_count'] for user in users)
    logger.info(f"Total pending applications: {total_pending}")
    
    text = [
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –æ–ø–ª–∞—Ç—É</b>",
        f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏: {total_pending}",
        f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}",
        "\nüë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞—è–≤–∫–∞–º–∏:</b>"
    ]
    
    keyboard = []
    for user in users:
        username = user['username'] or f"id{user['telegram_id']}"
        platforms_str = " ".join([
            {
                'youtube': 'üì∫',
                'tiktok': 'üì±',
                'shorts': 'üì±',
                'twitch': 'üéÆ',
                'other': 'üéØ'
            }.get(platform, 'üîó') for platform in user['platforms']
        ])
        
        logger.info(f"Processing user @{username} with {user['pending_count']} pending applications")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ —Ç–µ–∫—Å—Ç
        text.append(
            f"\n@{username}"
            f"\n‚îî –ó–∞—è–≤–æ–∫: üïí {user['pending_count']}"
            f"\n‚îî –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã: {platforms_str}"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard.append([
            InlineKeyboardButton(
                text=f"@{username} ({platforms_str} | üïí {user['pending_count']})",
                callback_data=f"show_user_{user['telegram_id']}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
    keyboard.append([
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="refresh_pay_list")
    ])
    
    logger.info("Sending response message")
    await message.answer(
        "\n".join(text),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="HTML"
    )

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
@router.callback_query(F.data == "refresh_pay_list")
async def refresh_pay_list(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞—è–≤–∫–∞–º–∏"""
    await show_users_with_pending_apps(callback.message)
    await callback.answer("–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω")

@router.callback_query(F.data.startswith("show_user_"))
async def show_user_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = int(callback.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    platforms = await router.database.get_user_platforms(user_id)
    
    keyboard = [
        [InlineKeyboardButton(text="üìä –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã", callback_data=f"user_platforms_{user_id}")],
        [InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"user_stats_{user_id}")],
        [InlineKeyboardButton(text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è", callback_data=f"contact_user_{user_id}")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_pay_menu")]
    ]
    
    platforms_text = "\n".join([
        f"‚Ä¢ {p['platform']}: –≤—Å–µ–≥–æ {p['total_content']}, –æ–ø–ª–∞—á–µ–Ω–æ {p['paid_content']}"
        for p in platforms
    ]) if platforms else "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º"
    
    await callback.message.edit_text(
        f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\n"
        f"üéÆ –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã:\n{platforms_text}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@router.callback_query(F.data == "back_to_pay_menu")
async def back_to_pay_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–∂–∏–¥–∞—é—â–∏–º–∏ –∑–∞—è–≤–∫–∞–º–∏"""
    await show_users_with_pending_apps(callback.message)

# ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏ 