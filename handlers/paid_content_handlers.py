from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta
from .states import PaidContentStates
from config.messages import START_MESSAGE, PAID_CONTENT_MESSAGE
import re

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MIN_VIEWS = 1000  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
MIN_VIEWS_SHORTS = 1000  # –ú–∏–Ω–∏–º—É–º –¥–ª—è —à–æ—Ä—Ç—Å–æ–≤/—Ç–∏–∫—Ç–æ–∫–æ–≤
MIN_VIEWS_VIDEO = 3000   # –ú–∏–Ω–∏–º—É–º –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –≤–∏–¥–µ–æ
MIN_VIEWS_STREAM = 20    # –ú–∏–Ω–∏–º—É–º –∑—Ä–∏—Ç–µ–ª–µ–π –¥–ª—è —Å—Ç—Ä–∏–º–æ–≤

router = Router()
router.database = None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ main.py

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É"
@router.callback_query(F.data == "paid_content")
async def show_paid_content_menu(callback: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º ID –∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback.from_user.id
    username = callback.from_user.username or str(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º –±–ª–æ–≥–µ—Ä–æ–º
    is_approved = await router.database.is_approved_blogger(username)
    
    if not is_approved:
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        inline_buttons = [
            [InlineKeyboardButton(text="ü§ù –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ", callback_data="collaboration")],
            [InlineKeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")]
        ]
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=inline_buttons)
        
        # –¢–∏—Ö–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –±–∞–∑–æ–≤–æ–µ –º–µ–Ω—é
        await callback.message.edit_text(
            START_MESSAGE,
            reply_markup=keyboard,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É
    stats = await router.database.get_user_applications_stats(user_id)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì§ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="submit_paid_content")],
        [InlineKeyboardButton(
            text=f"üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏ (üí∞ {stats['paid']} | ‚è≥ {stats['unpaid']})", 
            callback_data="my_paid_content"
        )],
        [
            InlineKeyboardButton(text="‚ÑπÔ∏è –î–ª—è –Ω–∞—Ä–µ–∑—á–∏–∫–æ–≤", callback_data="info_for_cutters"),
            InlineKeyboardButton(text="üìå –û —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ", callback_data="info_functionality")
        ],
        [
            InlineKeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–Ω–Ω–µ—Ä", callback_data="check_banner"),
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")
        ]
    ])
    
    text = (
        "üí∞ <b>–†–∞–∑–¥–µ–ª –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–Ω–Ω–µ—Ä –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º\n"
        "‚Ä¢ –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏ —É—Å–ª–æ–≤–∏—è–º–∏"
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML", disable_web_page_preview=True)

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ (–ø–æ—Ç–æ–º –∑–∞–º–µ–Ω–∏–º –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)
@router.callback_query(F.data == "submit_paid_content")
async def submit_paid_content(callback: CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="YouTube", callback_data="submit_youtube")],
        [InlineKeyboardButton(text="Shorts", callback_data="submit_shorts")],
        [InlineKeyboardButton(text="TikTok", callback_data="submit_tiktok")],
        [InlineKeyboardButton(text="Twitch", callback_data="submit_twitch")],
        [InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data="submit_other")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="paid_content")]
    ])
    
    text = (
        "üì§ <b>–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π —Ä–∞–∑–º–µ—â–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç:"
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML", disable_web_page_preview=True)

@router.callback_query(F.data == "my_paid_content")
async def my_paid_content(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞—è–≤–æ–∫"""
    stats = await router.database.get_user_applications_stats(callback.from_user.id)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üí∞ –û–ø–ª–∞—á–µ–Ω–Ω—ã–µ ({stats['paid']})", callback_data="show_paid_apps")],
        [InlineKeyboardButton(text=f"‚è≥ –û–∂–∏–¥–∞—é—Ç –æ–ø–ª–∞—Ç—ã ({stats['unpaid']})", callback_data="show_unpaid_apps")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –í –º–µ–Ω—é", callback_data="paid_content")]
    ])
    
    await callback.message.edit_text(
        "üìã <b>–ú–æ–∏ –∑–∞—è–≤–∫–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=keyboard,
        parse_mode="HTML",
        disable_web_page_preview=True
    )

@router.callback_query(F.data.in_(["show_paid_apps", "show_unpaid_apps"]))
async def show_applications_by_status(callback: CallbackQuery, state: FSMContext):
    is_paid = callback.data == "show_paid_apps"
    status = "paid" if is_paid else "pending"
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É
    applications, total = await router.database.get_user_applications_by_status(
        user_id=callback.from_user.id,
        status=status
    )
    
    if not applications:
        text = "üí∞ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫." if is_paid else "‚è≥ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏."
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì§ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="submit_paid_content")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="my_paid_content")]
            ]),
            disable_web_page_preview=True
        )
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É
    await state.update_data(current_index=0, status=status)
    await show_application(callback.message, applications[0], 0, total, status)

async def show_application(message: Message, app: dict, current_index: int, total: int, status: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–¥–Ω—É –∑–∞—è–≤–∫—É —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    payment_status = "üí∞ –û–ø–ª–∞—á–µ–Ω–æ" if app['status'] == 'paid' else "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ"
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    created_at = datetime.strptime(app['created_at'], "%Y-%m-%d %H:%M:%S")
    formatted_date = created_at.strftime("%d.%m.%Y %H:%M")
    
    # –ë–∞–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏
    text = (
        f"üìã <b>–ó–∞—è–≤–∫–∞ ‚Ññ{app['id']}</b>\n\n"
        f"üîó <a href='{app['link']}'>–û—Ç–∫—Ä—ã—Ç—å</a>\n"
        f"üìä –¢–∏–ø: {app['content_type']}\n"
        f"üìÖ –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {app['publish_date']}\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞—Ö –∏ –æ–ø–ª–∞—Ç–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    if app['status'] == 'paid':
        text += (
            f"üëÅ –ù–∞—á–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: {app['views_count']:,}\n"
            f"üëÅ –ö–æ–Ω–µ—á–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: {app['current_views']:,}\n"
            f"üí∞ –°—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã: {app['payment_amount']:,.2f} ‚ÇΩ\n"
        )
    else:
        text += f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {app['views_count']:,}\n"
    
    text += (
        f"üí≥ –û–ø–ª–∞—Ç–∞: {payment_status}\n"
        f"üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {app['note']}\n"
        f"üìÖ –ü–æ–¥–∞–Ω–∞: {formatted_date}\n\n"
        f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_index + 1} –∏–∑ {total}"
    )
    
    # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = []
    nav_row = []
    
    # –ö–Ω–æ–ø–∫–∞ –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
    if current_index > 0:
        nav_row.append(InlineKeyboardButton(text="‚èÆ", callback_data=f"show_app:0:{status}"))
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    if current_index > 0:
        nav_row.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"show_app:{current_index-1}:{status}"))
    
    # –ö–Ω–æ–ø–∫–∞ –≤–ø–µ—Ä–µ–¥
    if current_index < total - 1:
        nav_row.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"show_app:{current_index+1}:{status}"))
    
    # –ö–Ω–æ–ø–∫–∞ –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
    if current_index < total - 1:
        nav_row.append(InlineKeyboardButton(text="‚è≠", callback_data=f"show_app:{total-1}:{status}"))
    
    if nav_row:
        keyboard.append(nav_row)
    
    keyboard.extend([
        [InlineKeyboardButton(text="üìã –ö —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π", callback_data="my_paid_content")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –í –º–µ–Ω—é", callback_data="paid_content")]
    ])
    
    await message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="HTML",
        disable_web_page_preview=True
    )

@router.callback_query(F.data.startswith("show_app:"))
async def handle_application_navigation(callback: CallbackQuery, state: FSMContext):
    _, new_index, status = callback.data.split(":")
    new_index = int(new_index)
    
    applications, total = await router.database.get_user_applications_by_status(
        user_id=callback.from_user.id,
        status=status
    )
    
    if 0 <= new_index < total:
        await state.update_data(current_index=new_index)
        await show_application(callback.message, applications[new_index], new_index, total, status)

@router.callback_query(F.data == "check_banner")
async def check_banner(callback: CallbackQuery):
    await callback.answer("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–Ω–µ—Ä–∞")

@router.callback_query(F.data == "back_to_start")
async def back_to_start_callback(callback: CallbackQuery):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º –±–ª–æ–≥–µ—Ä–æ–º
    user_id = callback.from_user.id
    username = callback.from_user.username or str(user_id)
    is_approved = await router.database.is_approved_blogger(username)
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    inline_buttons = [
        [InlineKeyboardButton(text="ü§ù –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ", callback_data="collaboration")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")]
    ]
    
    if is_approved:
        inline_buttons.insert(1, [InlineKeyboardButton(text="üí∞ –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É", callback_data="paid_content")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=inline_buttons)
    
    try:
        await callback.message.edit_text(
            START_MESSAGE,
            reply_markup=keyboard,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
    except Exception as e:
        print(f"Error in back_to_start_callback: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await callback.message.answer(
            START_MESSAGE,
            reply_markup=keyboard,
            parse_mode="HTML",
            disable_web_page_preview=True
        )

@router.callback_query(F.data == "info_for_cutters")
async def show_info_for_cutters(callback: CallbackQuery):
    info_text = (
        "üìã <b>–ü—Ä–∞–≤–∏–ª–∞ –∏ —É—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞</b>\n\n"
        "‚ö†Ô∏è <b>–í–ê–ñ–ù–û:</b> –†–∞—Å—á–µ—Ç—ã –∑–∞ 16:9 —Ä–æ–ª–∏–∫–∏ –∏ —Å—Ç—Ä–∏–º—ã –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ\n\n"
        "üé¨ <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä–æ–ª–∏–∫—É:</b>\n"
        "‚Ä¢ –ë–∞–Ω–Ω–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω –ø–æ —Ü–µ–Ω—Ç—Ä—É, —Å–≤–µ—Ä—Ö—É –∏–ª–∏ —Å–Ω–∏–∑—É\n"
        "‚Ä¢ –ë–∞–Ω–Ω–µ—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—Ç—å—Å—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n"
        "‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–æ–ª–∏–∫–∞: 8 —Å–µ–∫—É–Ω–¥\n"
        "‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω–æ —É–¥–∞–ª—è—Ç—å —Ä–æ–ª–∏–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –º–µ—Å—è—Ü–µ–≤\n\n"
        "üí∞ <b>–°–∏—Å—Ç–µ–º–∞ –≤—ã–ø–ª–∞—Ç:</b>\n"
        "‚Ä¢ –í—ã–ø–ª–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç—Å—è –ø—Ä–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–∏ 500 000 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è –Ω–∞ 14-–π –¥–µ–Ω—å –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n"
        "‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–¥–∞—á–∏: 1000\n\n"
        "üìà <b>–ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:</b>\n"
        "–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: 10.02.2025\n"
        "–î–∞—Ç–∞ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: 24.02.2025\n"
        "<i>–ü—Ä–æ—Å–º–æ—Ç—Ä—ã –ø–æ—Å–ª–µ –¥–∞—Ç—ã —Ñ–∏–∫—Å–∞—Ü–∏–∏ –Ω–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è</i>\n\n"
        "‚≠êÔ∏è <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—è CPM:</b>\n"
        "‚Ä¢ –ú–æ—Ç–∏–≤–∏—Ä—É–π—Ç–µ –∑—Ä–∏—Ç–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –í–ê–® –ø—Ä–æ–º–æ–∫–æ–¥\n"
        "‚Ä¢ –ú—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤\n"
        "‚Ä¢ CPM –ø–æ–≤—ã—à–∞–µ—Ç—Å—è –¥–ª—è –∞–≤—Ç–æ—Ä–æ–≤ —Å –≤—ã—Å–æ–∫–æ–π –∫–æ–Ω–≤–µ—Ä—Å–∏–µ–π –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì§ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="submit_paid_content")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="paid_content")]
    ])
    
    await callback.message.edit_text(info_text, reply_markup=keyboard, parse_mode="HTML", disable_web_page_preview=True)

@router.callback_query(F.data == "info_functionality")
async def show_functionality_info(callback: CallbackQuery):
    functionality_text = (
        "üìå <b>–û —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ –∫–Ω–æ–ø–æ–∫</b>\n\n"
        "üì§ <b>–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É:</b>\n"
        "‚Ä¢ –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —à–æ—Ä—Ç—Å/–≤–∏–¥–µ–æ/—Å—Ç—Ä–∏–º\n"
        "‚Ä¢ –£–∫–∞–∑–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤/–ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
        "‚Ä¢ –£–∫–∞–∑–∞–Ω–∏–µ –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n\n"
        "üìã <b>–ú–æ–∏ –∑–∞—è–≤–∫–∏:</b>\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ (–æ–ø–ª–∞—á–µ–Ω–æ/–≤ –æ–∂–∏–¥–∞–Ω–∏–∏)\n\n"
        "üîç <b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–Ω–Ω–µ—Ä:</b>\n"
        "‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–Ω–Ω–µ—Ä\n"
        "‚Ä¢ –ü–æ –ø—Ä–∏—Ö–æ–¥—É —Ä–∞—Å—Å—ã–ª–∫–∏ –æ –Ω–æ–≤–æ–º –±–∞–Ω–Ω–µ—Ä–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–∫–∞—á–∞—Ç—å –±–∞–Ω–Ω–µ—Ä –ø–æ —Å—Å—ã–ª–∫–µ"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="paid_content")]
    ])
    
    await callback.message.edit_text(functionality_text, reply_markup=keyboard, parse_mode="HTML", disable_web_page_preview=True)

# –î–æ–±–∞–≤–∏–º –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
@router.message(Command("cancel"))
@router.message(F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    
    await state.clear()
    await message.answer(
        "‚ùå –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤—ã–±—Ä–∞–≤ –ø—É–Ω–∫—Ç ¬´–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É¬ª",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –í –º–µ–Ω—é", callback_data="paid_content")]
        ]),
        disable_web_page_preview=True
    )

# –û–±–Ω–æ–≤–∏–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π, –¥–æ–±–∞–≤–∏–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω—ã
@router.callback_query(F.data == "submit_shorts")
async def submit_shorts_content(callback: CallbackQuery, state: FSMContext):
    await state.set_state(PaidContentStates.waiting_for_link)
    await state.update_data(content_type='shorts')
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="submit_paid_content")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
    ])
    
    await callback.message.edit_text(
        "üì± <b>–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ YouTube Shorts</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à —Ä–æ–ª–∏–∫:\n\n"
        "üìå –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:\n"
        "‚Ä¢ youtube.com/shorts/abcdef",
        reply_markup=keyboard,
        parse_mode="HTML",
        disable_web_page_preview=True
    )

@router.callback_query(F.data == "submit_tiktok")
async def submit_tiktok_content(callback: CallbackQuery, state: FSMContext):
    await state.set_state(PaidContentStates.waiting_for_link)
    await state.update_data(content_type='tiktok')
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="submit_paid_content")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
    ])
    
    await callback.message.edit_text(
        "üì± <b>–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ TikTok</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à —Ä–æ–ª–∏–∫:\n\n"
        "üìå –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:\n"
        "‚Ä¢ tiktok.com/@user/video/123456789",
        reply_markup=keyboard,
        parse_mode="HTML",
        disable_web_page_preview=True
    )

@router.callback_query(F.data == "submit_twitch")
async def submit_twitch_content(callback: CallbackQuery, state: FSMContext):
    await state.set_state(PaidContentStates.waiting_for_link)
    await state.update_data(content_type='stream')
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="submit_paid_content")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
    ])
    
    await callback.message.edit_text(
        "üéÆ <b>–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ Twitch VOD</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–ø–∏—Å—å —Å—Ç—Ä–∏–º–∞:\n\n"
        "üìå –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:\n"
        "‚Ä¢ twitch.tv/videos/123456789",
        reply_markup=keyboard,
        parse_mode="HTML",
        disable_web_page_preview=True
    )

@router.callback_query(F.data == "submit_other")
async def submit_other_content(callback: CallbackQuery, state: FSMContext):
    await state.set_state(PaidContentStates.waiting_for_link)
    await state.update_data(content_type='other')
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="submit_paid_content")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
    ])
    
    await callback.message.edit_text(
        "üåê <b>–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –¥—Ä—É–≥–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç:\n\n"
        "üìå –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å—Å—ã–ª–∫–µ:\n"
        "‚Ä¢ –î–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://\n"
        "‚Ä¢ –î–æ–ª–∂–Ω–∞ –≤–µ—Å—Ç–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç\n"
        "‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É–±–ª–∏—á–Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω",
        reply_markup=keyboard,
        parse_mode="HTML",
        disable_web_page_preview=True
    )

def is_valid_link(link: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ TikTok/YouTube Shorts."""
    tiktok_pattern = r'https?://(?:www\.)?(?:vt\.)?tiktok\.com/\S+'
    youtube_pattern = r'https?://(?:www\.)?youtube\.com/shorts/\S+'
    
    return bool(re.match(tiktok_pattern, link) or re.match(youtube_pattern, link))

def is_valid_twitch_link(link: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ Twitch."""
    twitch_patterns = [
        r'https?://(?:www\.)?twitch\.tv/[\w-]+/?',  # –î–ª—è –∫–∞–Ω–∞–ª–æ–≤
        r'https?://(?:www\.)?twitch\.tv/videos/\d+/?'  # –î–ª—è –≤–∏–¥–µ–æ
    ]
    return any(bool(re.match(pattern, link)) for pattern in twitch_patterns)

def is_valid_stream_link(link: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å—Ç—Ä–∏–º."""
    patterns = [
        # Twitch –ø–∞—Ç—Ç–µ—Ä–Ω—ã (—Ç–æ–ª—å–∫–æ VOD)
        r'https?://(?:www\.)?twitch\.tv/videos/\d+/?',       # –¢–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ —Å—Ç—Ä–∏–º–æ–≤
        # YouTube –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        r'https?://(?:www\.)?youtube\.com/watch\?v=[\w-]+',  # –û–±—ã—á–Ω—ã–µ –≤–∏–¥–µ–æ
        r'https?://youtu\.be/[\w-]+',                        # –ö–æ—Ä–æ—Ç–∫–∏–µ —Å—Å—ã–ª–∫–∏
        r'https?://(?:www\.)?youtube\.com/live/[\w-]+',      # –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∏–º
        # TikTok –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        r'https?://(?:www\.|vm\.|vt\.)?tiktok\.com/@[\w.]+/live/?',  # –°—Å—ã–ª–∫–∏ –Ω–∞ live
        r'https?://(?:www\.|vm\.|vt\.)?tiktok\.com/@[\w.]+/video/\d+' # –ó–∞–ø–∏—Å–∏ —Å—Ç—Ä–∏–º–æ–≤
    ]
    return any(bool(re.match(pattern, link)) for pattern in patterns)

def is_valid_youtube_video_link(link: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ YouTube –≤–∏–¥–µ–æ."""
    patterns = [
        r'https?://(?:www\.)?youtube\.com/watch\?v=[\w-]+',  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞
        r'https?://youtu\.be/[\w-]+',                        # –ö–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞
        r'https?://(?:www\.)?youtube\.com/v/[\w-]+',         # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    ]
    return any(bool(re.match(pattern, link)) for pattern in patterns)

def is_valid_screenshot_link(link: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç."""
    image_hosting_patterns = [
        # PostImage
        r'https?://(?:www\.)?postimg\.cc/\w+',
        r'https?://(?:www\.)?i\.postimg\.cc/\w+/[\w-]+\.(?:jpg|jpeg|png|gif)',
        # ImgBB
        r'https?://(?:www\.)?ibb\.co/\w+',
        r'https?://(?:www\.)?i\.ibb\.co/\w+/[\w-]+\.(?:jpg|jpeg|png|gif)',
        # PostImages
        r'https?://(?:www\.)?postimages\.org/\w+',
        r'https?://(?:www\.)?i\.postimages\.org/\w+/[\w-]+\.(?:jpg|jpeg|png|gif)',
        # –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        r'https?://\S+\.(?:jpg|jpeg|png|gif)$'
    ]
    return any(bool(re.match(pattern, link, re.IGNORECASE)) for pattern in image_hosting_patterns)

@router.message(PaidContentStates.waiting_for_link)
async def process_link(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    content_type = data.get('content_type')

    if not message.text.startswith(('http://', 'https://')):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"submit_{content_type}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
        ])
        
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª\n\n"
            "–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å:\n"
            "‚Ä¢ http://\n"
            "‚Ä¢ https://\n\n"
            "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
            "‚Ä¢ postimg.cc/–∫–æ–¥\n"
            "‚Ä¢ ibb.co/–∫–æ–¥\n"
            "‚Ä¢ postimages.org/–∫–æ–¥\n"
            "‚Ä¢ –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏–µ—Å—è –Ω–∞ .jpg, .png –∏ —Ç.–¥.)",
            reply_markup=keyboard,
            disable_web_page_preview=True
        )
        return

    # –î–ª—è —Å—Ç—Ä–∏–º–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    if content_type == 'stream':
        if not is_valid_stream_link(message.text):
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="submit_stream")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
            ])
            
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏\n\n"
                "‚úÖ –ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Å—Å—ã–ª–∫–∏:\n"
                "<b>Twitch:</b>\n"
                "‚Ä¢ twitch.tv/videos/123456789 (–∑–∞–ø–∏—Å—å —Å—Ç—Ä–∏–º–∞)\n\n"
                "<b>YouTube:</b>\n"
                "‚Ä¢ youtube.com/watch?v=abcdef\n"
                "‚Ä¢ youtu.be/abcdef\n"
                "‚Ä¢ youtube.com/live/abcdef\n\n"
                "<b>TikTok:</b>\n"
                "‚Ä¢ tiktok.com/@user/live\n"
                "‚Ä¢ tiktok.com/@user/video/123456789\n\n"
                "‚ùóÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–ø–∏—Å—å —Å—Ç—Ä–∏–º–∞",
                parse_mode="HTML",
                disable_web_page_preview=True,
                reply_markup=keyboard
            )
            return
        
        await state.update_data(link=message.text)
        await state.set_state(PaidContentStates.waiting_for_screenshot)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
        ])
        
        await message.answer(
            "2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ç—Ä–∏–º–∞\n\n"
            "üìä –ù–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∏–¥–Ω—ã:\n"
            "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑—Ä–∏—Ç–µ–ª–µ–π\n"
            "‚Ä¢ –î–∞—Ç–∞ —Å—Ç—Ä–∏–º–∞\n"
            "‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n\n"
            "‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ—Ö–æ—Å—Ç–∏–Ω–≥–∏:\n"
            "‚Ä¢ imgur.com\n"
            "‚Ä¢ imgbb.com\n"
            "‚Ä¢ postimages.org\n\n"
            "‚ùóÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –Ω–∞ –æ–¥–∏–Ω –∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤\n"
            "–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            reply_markup=keyboard,
            disable_web_page_preview=True
        )
    elif content_type == 'shorts':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å TikTok
        tiktok_profile_patterns = [
            r'https?://(?:www\.|vm\.|vt\.)?tiktok\.com/@[\w.]+/?$',  # –§–æ—Ä–º–∞—Ç @username
            r'https?://(?:www\.|vm\.|vt\.)?tiktok\.com/[\w.]+/?$',   # –ö–æ—Ä–æ—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
        ]
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å - –æ—Ç–∫–ª–æ–Ω—è–µ–º
        if any(bool(re.match(pattern, message.text)) for pattern in tiktok_profile_patterns):
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"submit_{content_type}")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
            ])
            
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫:\n"
                "‚Ä¢ TikTok: tiktok.com/@user/video/123..\n"
                "‚Ä¢ Shorts: youtube.com/shorts/abc..\n\n"
                "‚ùóÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤–∏–¥–µ–æ",
                reply_markup=keyboard,
                disable_web_page_preview=True
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ –≤–∏–¥–µ–æ
        tiktok_video_patterns = [
            r'https?://(?:www\.|vm\.|vt\.)?tiktok\.com/@[\w.]+/video/\d+',  # –ü–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ
            r'https?://(?:www\.|vm\.|vt\.)?tiktok\.com/v/\d+',              # –ö–æ—Ä–æ—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ
            r'https?://(?:www\.)?youtube\.com/shorts/[\w-]+'                 # YouTube Shorts
        ]
        
        if not any(bool(re.match(pattern, message.text)) for pattern in tiktok_video_patterns):
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
            ])
            
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫:\n"
                "‚Ä¢ TikTok: tiktok.com/@user/video/123..\n"
                "‚Ä¢ Shorts: youtube.com/shorts/abc..\n\n"
                "‚ùóÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤–∏–¥–µ–æ",
                reply_markup=keyboard,
                disable_web_page_preview=True
            )
            return
        
        await state.update_data(link=message.text)
        await state.set_state(PaidContentStates.waiting_for_date)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
        ])
        
        await message.answer(
            "üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.02.2024",
            reply_markup=keyboard
        )
    else:
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –≤–∏–¥–µ–æ
        if not is_valid_youtube_video_link(message.text):
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
            ])
            
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫:\n"
                "‚Ä¢ youtube.com/watch?v=abcdef\n"
                "‚Ä¢ youtu.be/abcdef\n\n"
                "‚ùóÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ YouTube",
                reply_markup=keyboard,
                disable_web_page_preview=True
            )
            return
        
        await state.update_data(link=message.text)
        await state.set_state(PaidContentStates.waiting_for_date)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
        ])
        
        await message.answer(
            "üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.02.2024",
            reply_markup=keyboard
        )

def is_valid_date_format(date_str: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –î–î.–ú–ú.–ì–ì–ì–ì"""
    try:
        datetime.strptime(date_str, '%d.%m.%Y')
        return True
    except ValueError:
        return False

def is_valid_views_count(views_str: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —á–∏—Å–ª–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"""
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –∑–∞–ø—è—Ç—ã–µ
        clean_str = views_str.replace(',', '').replace(' ', '')
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
        if not clean_str.isdigit():
            return False
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∏—Å–ª–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ
        views = int(clean_str)
        return views > 0
    except ValueError:
        return False

@router.message(PaidContentStates.waiting_for_date)
async def process_video_date(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
    if not is_valid_date_format(message.text):
        data = await state.get_data()
        content_type = data.get('content_type')
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"submit_{content_type}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
        ])
        
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.02.2024",
            reply_markup=keyboard,
            disable_web_page_preview=True
        )
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        input_date = datetime.strptime(message.text, '%d.%m.%Y')
        current_date = datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –±—É–¥—É—â–µ–º
        if input_date > current_date:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∑–∞–Ω–∞ –±—É–¥—É—â–∞—è –¥–∞—Ç–∞\n\n"
                "–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
                ]),
                disable_web_page_preview=True
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ —Å—Ç–∞—Ä—à–µ 3 –º–µ—Å—è—Ü–µ–≤)
        three_months_ago = current_date - timedelta(days=90)
        if input_date < three_months_ago:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∑–∞–Ω–∞ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è –¥–∞—Ç–∞\n\n"
                "–ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –∑–∞—è–≤–∫–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ —Å—Ç–∞—Ä—à–µ 3 –º–µ—Å—è—Ü–µ–≤.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –±–æ–ª–µ–µ —Å–≤–µ–∂—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
                ]),
                disable_web_page_preview=True
            )
            return
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É
        await state.update_data(date=message.text)
        await state.set_state(PaidContentStates.waiting_for_views)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
        ])
        
        data = await state.get_data()
        content_type = data.get('content_type')
        min_views = {
            'stream': MIN_VIEWS_STREAM,
            'shorts': MIN_VIEWS_SHORTS,
            'video': MIN_VIEWS_VIDEO
        }.get(content_type, MIN_VIEWS)
        
        # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if content_type == 'stream':
            await message.answer(
                f"üë• –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑—Ä–∏—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∏–º–µ\n"
                f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {min_views:,}\n"
                "(–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∑–∞–ø—è—Ç—ã—Ö)",
                reply_markup=keyboard,
                disable_web_page_preview=True
            )
        else:
            await message.answer(
                f"üëÅ –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n"
                f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {min_views:,}\n"
                "(–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∑–∞–ø—è—Ç—ã—Ö)",
                reply_markup=keyboard,
                disable_web_page_preview=True
            )
    except ValueError:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
        ])
        
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã\n\n"
            "‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
            "‚Ä¢ 2024.02.25\n"
            "‚Ä¢ 25/02/2024\n"
            "‚Ä¢ 25-02-2024\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.02.2024",
            reply_markup=keyboard,
            disable_web_page_preview=True
        )

@router.message(PaidContentStates.waiting_for_views)
async def process_video_views(message: Message, state: FSMContext):
    if not is_valid_views_count(message.text):
        data = await state.get_data()
        content_type = data.get('content_type')
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"submit_{content_type}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
        ])
        
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ\n\n"
            "‚úÖ –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\n"
            "‚Ä¢ 1000\n"
            "‚Ä¢ 10000\n"
            "‚Ä¢ 100000\n\n"
            "‚ùå –ü—Ä–∏–º–µ—Ä—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\n"
            "‚Ä¢ 1–∫\n"
            "‚Ä¢ –º–Ω–æ–≥–æ\n"
            "‚Ä¢ ~1000",
            reply_markup=keyboard,
            disable_web_page_preview=True
        )
        return
    
    try:
        views = int(message.text.replace(',', '').replace(' ', ''))
        data = await state.get_data()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∏–Ω–∏–º—É–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if data.get('content_type') == 'stream':
            min_views = MIN_VIEWS_STREAM
            views_text = "–°—Ä–µ–¥–Ω–∏–π –æ–Ω–ª–∞–π–Ω"
        elif data.get('content_type') == 'shorts':
            min_views = MIN_VIEWS_SHORTS
            views_text = "–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"
        else:
            min_views = MIN_VIEWS_VIDEO
            views_text = "–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"
            
        if views < min_views:
            await message.answer(
                f"‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {views_text.lower()} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ {min_views:,}.\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞–±–µ—Ä–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {views_text.lower()}.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –í –º–µ–Ω—é", callback_data="paid_content")]
                ]),
                disable_web_page_preview=True
            )
            await state.clear()
            return
        
        await state.update_data(views=views)
        await state.set_state(PaidContentStates.waiting_for_note)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
        ])
        
        await message.answer(
            "üìù –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å\n"
            "(–µ—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ 0)",
            reply_markup=keyboard,
            disable_web_page_preview=True
        )
    except ValueError:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
        ])
        
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–µ–∑ –±—É–∫–≤ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤",
            reply_markup=keyboard,
            disable_web_page_preview=True
        )

def is_valid_note(note: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏—è"""
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª "0" - —ç—Ç–æ –≤–∞–ª–∏–¥–Ω–æ–µ –ø—É—Å—Ç–æ–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ
    if note == "0":
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ø—Ä–∏–º–µ—á–∞–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤)
    if len(note) > 200:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã (–±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –±–∞–∑–æ–≤–∞—è –ø—É–Ω–∫—Ç—É–∞—Ü–∏—è)
    allowed_chars = set("–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–ØabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 .,!?()-_")
    return all(char in allowed_chars for char in note)

@router.message(PaidContentStates.waiting_for_note)
async def process_video_note(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
    if not is_valid_note(message.text):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
        ])
        
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ\n\n"
            "‚úÖ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–∏–º–µ—á–∞–Ω–∏—é:\n"
            "‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤\n"
            "‚Ä¢ –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫–∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏\n"
            "‚Ä¢ –ï—Å–ª–∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 0\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ",
            reply_markup=keyboard,
            disable_web_page_preview=True
        )
        return

    data = await state.update_data(note=message.text)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if data.get('content_type') == 'stream':
        confirmation_text = (
            "üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ –Ω–∞ —Å—Ç—Ä–∏–º:</b>\n\n"
            f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∏–º: {data['link']}\n"
            f"üìä –¢–∏–ø –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: –ë–∞–Ω–Ω–µ—Ä\n"
            f"üìÖ –î–∞—Ç–∞: {data['date']}\n"
            f"üëÅ –°—Ä–µ–¥–Ω–∏–π –æ–Ω–ª–∞–π–Ω: {data['views']:,}\n"
            f"üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {data['note'] if data['note'] != '0' else '–ù–µ—Ç'}\n"
            f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: <a href='{data['screenshot']}'>–û—Ç–∫—Ä—ã—Ç—å</a>"
        )
    elif data.get('content_type') == 'shorts':
        confirmation_text = (
            "üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏:</b>\n\n"
            f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ: {data['link']}\n"
            f"üìä –¢–∏–ø –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: –ë–∞–Ω–Ω–µ—Ä\n"
            f"üìÖ –î–∞—Ç–∞: {data['date']}\n"
            f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {data['views']:,}\n"
            f"üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {data['note'] if data['note'] != '0' else '–ù–µ—Ç'}"
        )
    else:
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –≤–∏–¥–µ–æ
        confirmation_text = (
            "üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏:</b>\n\n"
            f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ: {data['link']}\n"
            f"üìä –¢–∏–ø –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: –†–µ–∫–ª–∞–º–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è\n"
            f"üìÖ –î–∞—Ç–∞: {data['date']}\n"
            f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {data['views']:,}\n"
            f"üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {data['note'] if data['note'] != '0' else '–ù–µ—Ç'}"
        )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_paid_content"),
            InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_paid_content")
        ],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="paid_content")]
    ])
    
    await state.set_state(PaidContentStates.waiting_for_confirmation)
    await message.answer(confirmation_text, reply_markup=keyboard, parse_mode="HTML", disable_web_page_preview=True)

@router.callback_query(F.data == "confirm_paid_content")
async def confirm_paid_content(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    application_id = await router.database.save_paid_content_application(
        user_id=callback.from_user.id,
        username=callback.from_user.username,  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
        content_type=data['content_type'],
        link=data['link'],
        publish_date=data['date'],
        note=data['note'],
        views_count=data['views']
    )
    
    await state.clear()
    await callback.message.edit_text(
        "‚úÖ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ú–æ–∏ –∑–∞—è–≤–∫–∏¬ª",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_paid_content")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –í –º–µ–Ω—é", callback_data="paid_content")]
        ]),
        disable_web_page_preview=True
    )

@router.callback_query(F.data == "edit_paid_content")
async def edit_paid_content(callback: CallbackQuery, state: FSMContext):
    await state.set_state(PaidContentStates.waiting_for_link)
    await callback.message.edit_text(
        "üì± <b>–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ Shorts/TikTok</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à —Ä–æ–ª–∏–∫ –∑–∞–Ω–æ–≤–æ:",
        parse_mode="HTML",
        disable_web_page_preview=True
    )

@router.callback_query(F.data == "submit_stream")
async def submit_stream_content(callback: CallbackQuery, state: FSMContext):
    await state.set_state(PaidContentStates.waiting_for_link)
    await state.update_data(content_type='stream')
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="submit_paid_content")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
    ])
    
    await callback.message.edit_text(
        "üéÆ <b>–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ —Å—Ç—Ä–∏–º</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à —Å—Ç—Ä–∏–º:",
        reply_markup=keyboard,
        parse_mode="HTML",
        disable_web_page_preview=True
    )

@router.callback_query(F.data == "submit_video")
async def submit_video_content(callback: CallbackQuery, state: FSMContext):
    await state.set_state(PaidContentStates.waiting_for_link)
    await state.update_data(content_type='video')
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
    ])
    
    await callback.message.edit_text(
        "üé• <b>–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à–µ –≤–∏–¥–µ–æ:",
        reply_markup=keyboard,
        parse_mode="HTML",
        disable_web_page_preview=True
    )

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É
@router.callback_query(F.data == "cancel_application")
async def cancel_application(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤—ã–±—Ä–∞–≤ –ø—É–Ω–∫—Ç ¬´–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É¬ª",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –í –º–µ–Ω—é", callback_data="paid_content")]
        ]),
        disable_web_page_preview=True
    )

# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
@router.message(PaidContentStates.waiting_for_screenshot)
async def process_stream_screenshot(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Å—ã–ª–∫–æ–π
    if not message.text.startswith(('http://', 'https://')):
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª\n\n"
            "–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å:\n"
            "‚Ä¢ http://\n"
            "‚Ä¢ https://\n\n"
            "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
            "‚Ä¢ postimg.cc/–∫–æ–¥\n"
            "‚Ä¢ ibb.co/–∫–æ–¥\n"
            "‚Ä¢ postimages.org/–∫–æ–¥\n"
            "‚Ä¢ –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏–µ—Å—è –Ω–∞ .jpg, .png –∏ —Ç.–¥.)",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
            ]),
            disable_web_page_preview=True
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if not is_valid_screenshot_link(message.text):
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏\n\n"
            "‚úÖ –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫:\n"
            "‚Ä¢ https://postimg.cc/abcd1234\n"
            "‚Ä¢ https://ibb.co/abcd1234\n"
            "‚Ä¢ https://postimages.org/abcd1234\n"
            "‚Ä¢ https://example.com/image.jpg\n\n"
            "‚ùóÔ∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∫–æ–ø–∏—Ä—É–µ—Ç–µ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
            "–∏–ª–∏ —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å —Å–µ—Ä–≤–∏—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
            ]),
            disable_web_page_preview=True
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç
    await state.update_data(screenshot=message.text)
    await state.set_state(PaidContentStates.waiting_for_date)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
    ])
    
    await message.answer(
        "üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Å—Ç—Ä–∏–º–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.02.2024",
        reply_markup=keyboard,
        disable_web_page_preview=True
    )

# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
@router.callback_query(F.data.in_(["next_page", "prev_page"]))
async def handle_pagination(callback: CallbackQuery, state: FSMContext):
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    # –ù—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ state
    await callback.answer("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ: –ø–∞–≥–∏–Ω–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥"
@router.callback_query(F.data.startswith("submit_"))
async def handle_back_button(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = await state.get_state()
    
    # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
    if current_state == PaidContentStates.waiting_for_link:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì± Shorts/TikTok", callback_data="submit_shorts")],
            [InlineKeyboardButton(text="üéÆ –°—Ç—Ä–∏–º", callback_data="submit_stream")],
            [InlineKeyboardButton(text="üé• –í–∏–¥–µ–æ", callback_data="submit_video")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="paid_content")]
        ])
        
        text = (
            "üì§ <b>–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏:"
        )
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await state.clear()
    
    # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞—Ç—ã –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    elif current_state in [PaidContentStates.waiting_for_date, PaidContentStates.waiting_for_views]:
        data = await state.get_data()
        content_type = data.get('content_type')
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É —Å—Å—ã–ª–∫–∏
        if content_type == 'shorts':
            await submit_shorts_content(callback, state)
        elif content_type == 'stream':
            await submit_stream_content(callback, state)
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –≤–∏–¥–µ–æ
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="submit_paid_content")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
            ])
            
            await callback.message.edit_text(
                "üé• <b>–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à–µ –≤–∏–¥–µ–æ:",
                reply_markup=keyboard,
                parse_mode="HTML",
                disable_web_page_preview=True
            )
            await state.set_state(PaidContentStates.waiting_for_link)
            await state.update_data(content_type='video')

@router.callback_query(F.data == "submit_youtube")
async def submit_youtube_content(callback: CallbackQuery, state: FSMContext):
    await state.set_state(PaidContentStates.waiting_for_link)
    await state.update_data(content_type='video')
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="submit_paid_content")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
    ])
    
    await callback.message.edit_text(
        "üé• <b>–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ YouTube –≤–∏–¥–µ–æ</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à–µ –≤–∏–¥–µ–æ:\n\n"
        "üìå –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫:\n"
        "‚Ä¢ youtube.com/watch?v=abcdef\n"
        "‚Ä¢ youtu.be/abcdef",
        reply_markup=keyboard,
        parse_mode="HTML",
        disable_web_page_preview=True
    )

@router.callback_query(F.data == "submit_shorts")
async def submit_shorts_content(callback: CallbackQuery, state: FSMContext):
    await state.set_state(PaidContentStates.waiting_for_link)
    await state.update_data(content_type='shorts')
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="submit_paid_content")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
    ])
    
    await callback.message.edit_text(
        "üì± <b>–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ YouTube Shorts</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à —Ä–æ–ª–∏–∫:\n\n"
        "üìå –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:\n"
        "‚Ä¢ youtube.com/shorts/abcdef",
        reply_markup=keyboard,
        parse_mode="HTML",
        disable_web_page_preview=True
    )

@router.callback_query(F.data == "submit_tiktok")
async def submit_tiktok_content(callback: CallbackQuery, state: FSMContext):
    await state.set_state(PaidContentStates.waiting_for_link)
    await state.update_data(content_type='tiktok')
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="submit_paid_content")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
    ])
    
    await callback.message.edit_text(
        "üì± <b>–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ TikTok</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à —Ä–æ–ª–∏–∫:\n\n"
        "üìå –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:\n"
        "‚Ä¢ tiktok.com/@user/video/123456789",
        reply_markup=keyboard,
        parse_mode="HTML",
        disable_web_page_preview=True
    )

@router.callback_query(F.data == "submit_twitch")
async def submit_twitch_content(callback: CallbackQuery, state: FSMContext):
    await state.set_state(PaidContentStates.waiting_for_link)
    await state.update_data(content_type='stream')
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="submit_paid_content")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
    ])
    
    await callback.message.edit_text(
        "üéÆ <b>–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ Twitch VOD</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–ø–∏—Å—å —Å—Ç—Ä–∏–º–∞:\n\n"
        "üìå –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:\n"
        "‚Ä¢ twitch.tv/videos/123456789",
        reply_markup=keyboard,
        parse_mode="HTML",
        disable_web_page_preview=True
    )

@router.callback_query(F.data == "submit_other")
async def submit_other_content(callback: CallbackQuery, state: FSMContext):
    await state.set_state(PaidContentStates.waiting_for_link)
    await state.update_data(content_type='other')
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="submit_paid_content")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
    ])
    
    await callback.message.edit_text(
        "üåê <b>–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –¥—Ä—É–≥–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç:\n\n"
        "üìå –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å—Å—ã–ª–∫–µ:\n"
        "‚Ä¢ –î–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://\n"
        "‚Ä¢ –î–æ–ª–∂–Ω–∞ –≤–µ—Å—Ç–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç\n"
        "‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É–±–ª–∏—á–Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω",
        reply_markup=keyboard,
        parse_mode="HTML",
        disable_web_page_preview=True
    ) 